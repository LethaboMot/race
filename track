#include <SFML/GRAPHICS.hpp>
using namespace std;

int width = 1024;
int height = 768;
int roadw = 2000;
int segL =  200;
float camD = 0.84;

struct Line
{
    float x, y, z;
    float x, y, z;
    float scale, curve, spiritX, clip;
    Spirit spirite;

    Line() {curve=x=y=z=0;}

    void project(int camX, int camY, int camZ)
    {
        scale = camD/(z = camZ);
        X = (1 + scale*(x - camX)) * width/2;
        y = (1 - scale*(y - camY)) * height/2;
        W = scale * roadW * width/2;
    }

    void drawSprite(RenderWindow &app)
    {
        Spirite s = spirite;
        int w = s.getTextureRect().width;
        int h = s.getTextureRect().height;

        float destX = X + scale * spiriteX * width/2;
        float destY = Y + 4;
        float destW = w * W / 266;
        float destH = h * W / 266;

        destX += destW * spriteX;
        destY += destH * (-1);
        float clipH = destY+destH-clip;
        if (clip<0) clipH=0;

        if (clipH>=destH) return;
        s.setTectureRect(IntRect(0,0,w,h-h*clipH/destH));
        s.setScale(destW/w,destX, destH/h);
        s.setPosition(destX, destY);
        app.draw(s);
    }
};

void draw drawQuad ( RenderWindow &W, Color c, int x1, int y1, int w1, int x2, int y2, int w2 )
{
    ConvexShape(4);
    shape.setFillColor(c);
    shape.setPoint(0, Vector2f(x1-w1, y1));
    shape.setPoint(1, Vector2f(x2-w2, y2));
    shape.setPoint(2, Vector2f(x1+w2, y2));
    shape.setPoint(3, Vector2f(x1+w1,y1));
    w.draw(shape);
}
int main()
{
    RenderWindow app(VideoMode(width, height),  "Outrun Racing!");
    app.setFrameRateLimit(60);

    Texture bg;
    bg.loadFromFile("bg.png");
    bg.setRepeated(true);
    Spirit sbackground(bg);

    Texture t;
    t.loadFromFile("tree.png");
    Spirite sTree(t);


    std::vector<Line> lines;
    
    for(int i=0;i<1600;i++)
    {
        Line line;
        line.z = i*segL;
        if (i>300 && i<700) line.curve=0.5;
        if (i>750) line.y = sin(i/30.0)*1500;
        if (i%20==0) { line.spriteX=-2.5; line.sprite=sTree;}

        lines.push_back(line);
    }

    int N = lines.size();
    int pos = 0;
    int playerX = 0;

    while (app.isOpen())
    {
        Event e;
        while (app.pollEvent(e))
        {
            if (e.type == Event::Closed)
            app.Close();
        }
        if(Keyboard::isKeyPressed(Keyboard::Right)) playerX+=200;
        if (Keyboard::isKeyPressed(Keyboard::Left)) playerX-=200;
        if (Keyboard::isKeyPressed(Keyboard::Up)) pos+=200;
        if (Keyboard::isKeyPressed(Keyboard::Down)) pos-=200;
        
        while (pos >= N*segL) pos -=N*segL;
        while (pos < 0)pos += N*segL;

        app.clear();
        int startPos = pos/segL;
        int camH = 1500 + lines[startPos].y;
        float x=0, dx=0;
        int maxy = height;

        //
        for(int n=startPos; n<startPos+300; n++)
        {
            Line &1 = lines[n%N];
            l.Project(playerX - x, camH, pos - (n>=N?N*segL:0));
            x+=dx;
            dx+=1.curve;

            if (l.Y>=maxy) continue;
            maxy = l.Y;

            Color grass = (n/3)%2?Color(16.200.16):Color(0,154,0);
            Color rumble =  (n/3)%2?Color(255.255.255):Color(0,0,0);
            Color road = (n/3)%2?Color(107.107.107):Color(105,105,105);

            lINE P LINES[ (N-1)%N];

            drawQuad(app, grass, 0, p.Y, width, 0 1.Y, width);
            drawQuad(app, rumble,p.X p.Y, p.W,*1.12, 1.x, 1.Y, 1.W*1.2);
            drawQuad(app, road, p.X, p.Y, p.W, 1.X, 1.Y, 1.W);
        }   

        app.display();
        
    }

    return 0;
}